// Generated by CoffeeScript 1.6.2
(function() {
  var FancyController, Injector, LogController, MyService, OtherGreeter, RobotGreeter, SomeController, WelcomeController, createInstance, logController, myService, someController;

  createInstance = function(target, args) {
    var F;

    F = function() {
      return target.apply(this, args);
    };
    F.prototype = target.prototype;
    return new F(args);
  };

  /*
  * todo: 
  * - cache reflection for next process
  */


  Injector = {
    /*
    * {name, object, selfDeps}
    */

    dependencies: {},
    parseArgs: function(target) {
      var FN_ARG, FN_ARGS, FN_ARG_SPLIT, STRIP_COMMENTS, args, text;

      FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
      FN_ARG_SPLIT = /,/;
      FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
      STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/g;
      text = target.toString().replace(STRIP_COMMENTS, '');
      args = text.match(FN_ARGS)[1].split(FN_ARG_SPLIT);
      return args;
    },
    process: function(target) {
      var args, instance;

      args = this.parseArgs(target);
      instance = createInstance(target, this.getDependencies(args));
      return instance;
    },
    getDependencies: function(arr) {
      var deps, self;

      self = this;
      deps = arr.map(function(value) {
        var curTarget, dep;

        dep = self.dependencies[value];
        curTarget = dep.object;
        if (dep.selfDeps) {
          deps = self.getDependencies(dep.selfDeps);
          curTarget = curTarget.apply(curTarget, deps);
        }
        return curTarget;
      });
      return deps;
    },
    /*
    * register component 
    * @param {String} name - name of the param used to inject the component 
    # @param {Function} dependencyObj - function to inject
    # @param {bool} - inject component dependencies
    */

    register: function(name, dependencyObj, injectDeps) {
      var dependency;

      dependency = {
        object: dependencyObj
      };
      if (injectDeps) {
        dependency.selfDeps = this.parseArgs(dependencyObj);
      }
      return this.dependencies[name] = dependency;
    }
  };

  WelcomeController = function(Greeter) {
    return console.log(Greeter.greet());
  };

  LogController = function(log) {
    return {
      runLog: function(value) {
        return log(value);
      }
    };
  };

  RobotGreeter = {
    greet: function() {
      return "Domo Arigato";
    }
  };

  OtherGreeter = {
    greet: function() {
      return "That will do pig.";
    }
  };

  console.log("USE CASE 1 : SIMPLE");

  Injector.register('log', console.log);

  Injector.register("Greeter", (Math.random() > 0.5 ? RobotGreeter : OtherGreeter));

  Injector.process(WelcomeController);

  logController = Injector.process(LogController);

  console.log(logController);

  logController.runLog('prime');

  console.log("USE CASE 2 : dependencies");

  FancyController = function(log) {
    return {
      logSomething: function(value) {
        return log(value);
      }
    };
  };

  SomeController = function(fancyController) {
    return {
      log: function(value) {
        return fancyController.logSomething(value);
      }
    };
  };

  MyService = (function() {
    function MyService(log) {
      this.log = log;
    }

    MyService.prototype.runLog = function(value) {
      return this.log(value);
    };

    return MyService;

  })();

  console.log("USE CASE 3 : class ");

  Injector.register('fancyController', FancyController, true);

  someController = Injector.process(SomeController);

  someController.log('testing');

  myService = Injector.process(MyService);

  myService.runLog('myService');

}).call(this);
